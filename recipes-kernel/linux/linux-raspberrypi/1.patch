diff --git a/arch/arm/boot/dts/overlays/Makefile b/arch/arm/boot/dts/overlays/Makefile
index b6abddcb2615..ecc78fb3291e 100644
--- a/arch/arm/boot/dts/overlays/Makefile
+++ b/arch/arm/boot/dts/overlays/Makefile
@@ -114,6 +114,7 @@ dtbo-$(CONFIG_ARCH_BCM2835) += \
 	mcp3202.dtbo \
 	mcp342x.dtbo \
 	media-center.dtbo \
+	melbinst-delia.dtbo \
 	merus-amp.dtbo \
 	midi-uart0.dtbo \
 	midi-uart1.dtbo \
diff --git a/drivers/dma/bcm2835-dma.c b/drivers/dma/bcm2835-dma.c
index 5a9b18edc2b7..5342e6716e46 100644
--- a/drivers/dma/bcm2835-dma.c
+++ b/drivers/dma/bcm2835-dma.c
@@ -32,6 +32,7 @@
 #include <linux/spinlock.h>
 #include <linux/of.h>
 #include <linux/of_dma.h>
+#include <rtdm/driver.h>
 
 #include "virt-dma.h"
 
@@ -311,6 +312,12 @@ static const struct bcm2835_dma_cfg_data bcm2711_dma_cfg = {
 	.dma_mask = DMA_BIT_MASK(36),
 };
 
+/* RTDM interrupt objects */
+static rtdm_irq_t  dma_rtdm_tx1_irq;
+static rtdm_irq_t  dma_rtdm_rx1_irq;
+static rtdm_irq_t  dma_rtdm_tx2_irq;
+static rtdm_irq_t  dma_rtdm_rx2_irq;
+
 static inline size_t bcm2835_dma_max_frame_length(struct bcm2835_chan *c)
 {
 	/* lite and normal channels have different max frame length */
@@ -682,6 +689,56 @@ static void bcm2835_dma_start_desc(struct bcm2835_chan *c)
 	}
 }
 
+static void bcm2835_chan_complete_cyclic(struct virt_dma_desc *vd)
+{
+	struct virt_dma_chan *vc = to_virt_chan(vd->tx.chan);
+
+	vc->cyclic = vd;
+	vchan_complete((unsigned long)vc);
+}
+
+static void bcm2835_chan_complete(struct virt_dma_desc *vd)
+{
+	struct virt_dma_chan *vc = to_virt_chan(vd->tx.chan);
+	dma_cookie_t cookie;
+
+	cookie = vd->tx.cookie;
+	dma_cookie_complete(&vd->tx);
+	dev_vdbg(vc->chan.device->dev, "txd %p[%x]: marked complete\n",
+		 vd, cookie);
+	list_add_tail(&vd->node, &vc->desc_completed);
+
+	vchan_complete((unsigned long)vc);
+}
+
+static int bcm2835_dma_rtcallback(rtdm_irq_t *irqh)
+{
+	struct bcm2835_chan *c = rtdm_irq_get_arg(irqh, struct bcm2835_chan);
+	struct bcm2835_desc *d;
+	unsigned long flags;
+
+	/* Acknowledge interrupt */
+	writel(BCM2835_DMA_INT, c->chan_base + BCM2835_DMA_CS);
+
+	d = c->desc;
+
+	if (d) {
+		if (d->cyclic) {
+			/* call the cyclic callback */
+			bcm2835_chan_complete_cyclic(&d->vd);
+
+			/* Keep the DMA engine running */
+			writel(BCM2835_DMA_ACTIVE,
+			       c->chan_base + BCM2835_DMA_CS);
+		} else {
+			bcm2835_chan_complete(&c->desc->vd);
+			bcm2835_dma_start_desc(c);
+		}
+	}
+
+	return RTDM_IRQ_HANDLED;
+}
+
 static irqreturn_t bcm2835_dma_callback(int irq, void *data)
 {
 	struct bcm2835_chan *c = data;
@@ -697,7 +754,7 @@ static irqreturn_t bcm2835_dma_callback(int irq, void *data)
 			return IRQ_NONE;
 	}
 
-	spin_lock_irqsave(&c->vc.lock, flags);
+	raw_spin_lock_irqsave(&c->vc.lock, flags);
 
 	/*
 	 * Clear the INT flag to receive further interrupts. Keep the channel
@@ -721,7 +778,7 @@ static irqreturn_t bcm2835_dma_callback(int irq, void *data)
 		}
 	}
 
-	spin_unlock_irqrestore(&c->vc.lock, flags);
+	raw_spin_unlock_irqrestore(&c->vc.lock, flags);
 
 	return IRQ_HANDLED;
 }
@@ -748,15 +805,61 @@ static int bcm2835_dma_alloc_chan_resources(struct dma_chan *chan)
 			   c->irq_flags, "DMA IRQ", c);
 }
 
+/* This handler was not present for bcm2835-dma and most certainly no one calls
+it. Hence, it's safe to use this to enter dma backend to get the rtdm irqs */
+static int bcm2835_dma_resume(struct dma_chan *chan)
+{
+	static rtdm_irq_t *rtdm_irq_handle;
+	struct bcm2835_chan *c = to_bcm2835_dma_chan(chan);
+	int ret = 0;
+
+	if (chan->private) {
+		if (!strcmp(chan->private, "rtdm-tx1-irq")) {
+			rtdm_irq_handle = &dma_rtdm_tx1_irq;
+		} else if (!strcmp(chan->private, "rtdm-rx1-irq")) {
+			rtdm_irq_handle = &dma_rtdm_rx1_irq;
+		} else if (!strcmp(chan->private, "rtdm-tx2-irq")) {
+			rtdm_irq_handle = &dma_rtdm_tx2_irq;
+		} else if (!strcmp(chan->private, "rtdm-rx2-irq")) {
+			rtdm_irq_handle = &dma_rtdm_rx2_irq;
+		} else {
+			return ret;
+		}
+		free_irq(c->irq_number, c);
+		ret = rtdm_irq_request(rtdm_irq_handle, c->irq_number,
+					bcm2835_dma_rtcallback,
+					0, "RT DMA IRQ", c);
+		if (ret) {
+			printk(KERN_ERR "bcm2835-dma: RT IRQ request failed %d %d\n", ret, c->irq_number);
+		}
+	}
+	return ret;
+}
+
 static void bcm2835_dma_free_chan_resources(struct dma_chan *chan)
 {
 	struct bcm2835_chan *c = to_bcm2835_dma_chan(chan);
 
 	vchan_free_chan_resources(&c->vc);
+	if (chan->private) {
+		if (!strcmp(chan->private, "rtdm-tx1-irq")) {
+			rtdm_irq_free(&dma_rtdm_tx1_irq);
+			goto exit;
+		} else if (!strcmp(chan->private, "rtdm-rx1-irq")) {
+			rtdm_irq_free(&dma_rtdm_rx1_irq);
+			goto exit;
+		} else if (!strcmp(chan->private, "rtdm-tx2-irq")) {
+			rtdm_irq_free(&dma_rtdm_tx2_irq);
+			goto exit;
+		} else if (!strcmp(chan->private, "rtdm-rx2-irq")) {
+			rtdm_irq_free(&dma_rtdm_rx2_irq);
+			goto exit;
+		}
+	}
 	free_irq(c->irq_number, c);
-	dma_pool_destroy(c->cb_pool);
 
-	dev_dbg(c->vc.chan.device->dev, "Freeing DMA channel %u\n", c->ch);
+exit:	dma_pool_destroy(c->cb_pool);
+	dev_dbg(c->vc.chan.device->dev, "Freeing DMA channel %u\n",c->ch);
 }
 
 static size_t bcm2835_dma_desc_size(struct bcm2835_desc *d)
@@ -800,7 +903,7 @@ static enum dma_status bcm2835_dma_tx_status(struct dma_chan *chan,
 	if (ret == DMA_COMPLETE || !txstate)
 		return ret;
 
-	spin_lock_irqsave(&c->vc.lock, flags);
+	raw_spin_lock_irqsave(&c->vc.lock, flags);
 	vd = vchan_find_desc(&c->vc, cookie);
 	if (vd) {
 		txstate->residue =
@@ -829,7 +932,7 @@ static enum dma_status bcm2835_dma_tx_status(struct dma_chan *chan,
 		txstate->residue = 0;
 	}
 
-	spin_unlock_irqrestore(&c->vc.lock, flags);
+	raw_spin_unlock_irqrestore(&c->vc.lock, flags);
 
 	return ret;
 }
@@ -839,11 +942,11 @@ static void bcm2835_dma_issue_pending(struct dma_chan *chan)
 	struct bcm2835_chan *c = to_bcm2835_dma_chan(chan);
 	unsigned long flags;
 
-	spin_lock_irqsave(&c->vc.lock, flags);
+	raw_spin_lock_irqsave(&c->vc.lock, flags);
 	if (vchan_issue_pending(&c->vc) && !c->desc)
 		bcm2835_dma_start_desc(c);
 
-	spin_unlock_irqrestore(&c->vc.lock, flags);
+	raw_spin_unlock_irqrestore(&c->vc.lock, flags);
 }
 
 static struct dma_async_tx_descriptor *bcm2835_dma_prep_dma_memcpy(
@@ -1047,7 +1150,7 @@ static int bcm2835_dma_terminate_all(struct dma_chan *chan)
 	unsigned long flags;
 	LIST_HEAD(head);
 
-	spin_lock_irqsave(&c->vc.lock, flags);
+	raw_spin_lock_irqsave(&c->vc.lock, flags);
 
 	/* stop DMA activity */
 	if (c->desc) {
@@ -1060,7 +1163,7 @@ static int bcm2835_dma_terminate_all(struct dma_chan *chan)
 	}
 
 	vchan_get_all_descriptors(&c->vc, &head);
-	spin_unlock_irqrestore(&c->vc.lock, flags);
+	raw_spin_unlock_irqrestore(&c->vc.lock, flags);
 	vchan_dma_desc_free_list(&c->vc, &head);
 
 	return 0;
@@ -1243,6 +1346,7 @@ static int bcm2835_dma_probe(struct platform_device *pdev)
 	dma_cap_set(DMA_PRIVATE, od->ddev.cap_mask);
 	dma_cap_set(DMA_CYCLIC, od->ddev.cap_mask);
 	dma_cap_set(DMA_MEMCPY, od->ddev.cap_mask);
+	od->ddev.device_resume = bcm2835_dma_resume;
 	od->ddev.device_alloc_chan_resources = bcm2835_dma_alloc_chan_resources;
 	od->ddev.device_free_chan_resources = bcm2835_dma_free_chan_resources;
 	od->ddev.device_tx_status = bcm2835_dma_tx_status;
diff --git a/drivers/dma/virt-dma.c b/drivers/dma/virt-dma.c
index 256fc662c500..7071a25900d3 100644
--- a/drivers/dma/virt-dma.c
+++ b/drivers/dma/virt-dma.c
@@ -23,11 +23,11 @@ dma_cookie_t vchan_tx_submit(struct dma_async_tx_descriptor *tx)
 	unsigned long flags;
 	dma_cookie_t cookie;
 
-	spin_lock_irqsave(&vc->lock, flags);
+	raw_spin_lock_irqsave(&vc->lock, flags);
 	cookie = dma_cookie_assign(tx);
 
 	list_move_tail(&vd->node, &vc->desc_submitted);
-	spin_unlock_irqrestore(&vc->lock, flags);
+	raw_spin_unlock_irqrestore(&vc->lock, flags);
 
 	dev_dbg(vc->chan.device->dev, "vchan %p: txd %p[%x]: submitted\n",
 		vc, vd, cookie);
@@ -52,9 +52,9 @@ int vchan_tx_desc_free(struct dma_async_tx_descriptor *tx)
 	struct virt_dma_desc *vd = to_virt_desc(tx);
 	unsigned long flags;
 
-	spin_lock_irqsave(&vc->lock, flags);
+	raw_spin_lock_irqsave(&vc->lock, flags);
 	list_del(&vd->node);
-	spin_unlock_irqrestore(&vc->lock, flags);
+	raw_spin_unlock_irqrestore(&vc->lock, flags);
 
 	dev_dbg(vc->chan.device->dev, "vchan %p: txd %p[%x]: freeing\n",
 		vc, vd, vd->tx.cookie);
@@ -80,14 +80,14 @@ EXPORT_SYMBOL_GPL(vchan_find_desc);
  * This tasklet handles the completion of a DMA descriptor by
  * calling its callback and freeing it.
  */
-static void vchan_complete(unsigned long arg)
+void vchan_complete(unsigned long arg)
 {
 	struct virt_dma_chan *vc = (struct virt_dma_chan *)arg;
 	struct virt_dma_desc *vd, *_vd;
 	struct dmaengine_desc_callback cb;
 	LIST_HEAD(head);
 
-	spin_lock_irq(&vc->lock);
+	raw_spin_lock_irq(&vc->lock);
 	list_splice_tail_init(&vc->desc_completed, &head);
 	vd = vc->cyclic;
 	if (vd) {
@@ -96,7 +96,7 @@ static void vchan_complete(unsigned long arg)
 	} else {
 		memset(&cb, 0, sizeof(cb));
 	}
-	spin_unlock_irq(&vc->lock);
+	raw_spin_unlock_irq(&vc->lock);
 
 	dmaengine_desc_callback_invoke(&cb, &vd->tx_result);
 
@@ -108,6 +108,7 @@ static void vchan_complete(unsigned long arg)
 		vchan_vdesc_fini(vd);
 	}
 }
+EXPORT_SYMBOL_GPL(vchan_complete);
 
 void vchan_dma_desc_free_list(struct virt_dma_chan *vc, struct list_head *head)
 {
@@ -129,7 +130,7 @@ void vchan_init(struct virt_dma_chan *vc, struct dma_device *dmadev)
 {
 	dma_cookie_init(&vc->chan);
 
-	spin_lock_init(&vc->lock);
+	raw_spin_lock_init(&vc->lock);
 	INIT_LIST_HEAD(&vc->desc_allocated);
 	INIT_LIST_HEAD(&vc->desc_submitted);
 	INIT_LIST_HEAD(&vc->desc_issued);
diff --git a/drivers/dma/virt-dma.h b/drivers/dma/virt-dma.h
index ab158bac03a7..ea27cc838700 100644
--- a/drivers/dma/virt-dma.h
+++ b/drivers/dma/virt-dma.h
@@ -24,7 +24,11 @@ struct virt_dma_chan {
 	struct tasklet_struct task;
 	void (*desc_free)(struct virt_dma_desc *);
 
-	spinlock_t lock;
+#ifdef CONFIG_IPIPE
+	ipipe_spinlock_t lock;
+#else
+	raw_spinlock_t lock;
+#endif
 
 	/* protected by vc.lock */
 	struct list_head desc_allocated;
@@ -46,6 +50,7 @@ void vchan_init(struct virt_dma_chan *vc, struct dma_device *dmadev);
 struct virt_dma_desc *vchan_find_desc(struct virt_dma_chan *, dma_cookie_t);
 extern dma_cookie_t vchan_tx_submit(struct dma_async_tx_descriptor *);
 extern int vchan_tx_desc_free(struct dma_async_tx_descriptor *);
+extern void vchan_complete(unsigned long arg);
 
 /**
  * vchan_tx_prep - prepare a descriptor
@@ -66,9 +71,9 @@ static inline struct dma_async_tx_descriptor *vchan_tx_prep(struct virt_dma_chan
 	vd->tx_result.result = DMA_TRANS_NOERROR;
 	vd->tx_result.residue = 0;
 
-	spin_lock_irqsave(&vc->lock, flags);
+	raw_spin_lock_irqsave(&vc->lock, flags);
 	list_add_tail(&vd->node, &vc->desc_allocated);
-	spin_unlock_irqrestore(&vc->lock, flags);
+	raw_spin_unlock_irqrestore(&vc->lock, flags);
 
 	return &vd->tx;
 }
@@ -187,11 +192,11 @@ static inline void vchan_free_chan_resources(struct virt_dma_chan *vc)
 	unsigned long flags;
 	LIST_HEAD(head);
 
-	spin_lock_irqsave(&vc->lock, flags);
+	raw_spin_lock_irqsave(&vc->lock, flags);
 	vchan_get_all_descriptors(vc, &head);
 	list_for_each_entry(vd, &head, node)
 		dmaengine_desc_clear_reuse(&vd->tx);
-	spin_unlock_irqrestore(&vc->lock, flags);
+	raw_spin_unlock_irqrestore(&vc->lock, flags);
 
 	vchan_dma_desc_free_list(vc, &head);
 }
@@ -211,12 +216,12 @@ static inline void vchan_synchronize(struct virt_dma_chan *vc)
 
 	tasklet_kill(&vc->task);
 
-	spin_lock_irqsave(&vc->lock, flags);
+	raw_spin_lock_irqsave(&vc->lock, flags);
 	if (vc->vd_terminated) {
 		vchan_vdesc_fini(vc->vd_terminated);
 		vc->vd_terminated = NULL;
 	}
-	spin_unlock_irqrestore(&vc->lock, flags);
+	raw_spin_unlock_irqrestore(&vc->lock, flags);
 }
 
 #endif
diff --git a/drivers/gpio/gpiolib.c b/drivers/gpio/gpiolib.c
index 1e6bc8ecb5dc..0ac2760db168 100644
--- a/drivers/gpio/gpiolib.c
+++ b/drivers/gpio/gpiolib.c
@@ -3959,8 +3959,8 @@ void gpiochip_enable_irq(struct gpio_chip *chip, unsigned int offset)
 {
 	struct gpio_desc *desc = gpiochip_get_desc(chip, offset);
 
-	if (!IS_ERR(desc) &&
-	    !WARN_ON(!test_bit(FLAG_USED_AS_IRQ, &desc->flags))) {
+	if (!IS_ERR(desc)) { //&&
+	    //!WARN_ON(!test_bit(FLAG_USED_AS_IRQ, &desc->flags))) {
 		/*
 		 * We must not be output when using IRQ UNLESS we are
 		 * open drain.
diff --git a/drivers/gpu/drm/vc4/vc4_drv.c b/drivers/gpu/drm/vc4/vc4_drv.c
index 2e1b2e51aff0..1ed82b7bbce7 100644
--- a/drivers/gpu/drm/vc4/vc4_drv.c
+++ b/drivers/gpu/drm/vc4/vc4_drv.c
@@ -326,7 +326,7 @@ static int vc4_drm_bind(struct device *dev)
 	if (ret < 0)
 		goto unbind_all;
 
-	drm_fbdev_generic_setup(drm, 16);
+	drm_fbdev_generic_setup(drm, 32);
 
 	return 0;
 
diff --git a/drivers/gpu/drm/vc4/vc4_drv.h b/drivers/gpu/drm/vc4/vc4_drv.h
index 9e825c81ad0c..872592716b42 100644
--- a/drivers/gpu/drm/vc4/vc4_drv.h
+++ b/drivers/gpu/drm/vc4/vc4_drv.h
@@ -79,6 +79,7 @@ struct vc4_dev {
 	struct vc4_hvs *hvs;
 	struct vc4_v3d *v3d;
 	struct vc4_dpi *dpi;
+	struct vc4_dsi *dsi0;
 	struct vc4_dsi *dsi1;
 	struct vc4_vec *vec;
 	struct vc4_txp *txp;
diff --git a/drivers/gpu/drm/vc4/vc4_dsi.c b/drivers/gpu/drm/vc4/vc4_dsi.c
index 3448b314d361..194525cafce7 100644
--- a/drivers/gpu/drm/vc4/vc4_dsi.c
+++ b/drivers/gpu/drm/vc4/vc4_dsi.c
@@ -304,11 +304,11 @@
 # define DSI0_PHY_AFEC0_RESET			BIT(11)
 # define DSI1_PHY_AFEC0_PD_BG			BIT(11)
 # define DSI0_PHY_AFEC0_PD			BIT(10)
-# define DSI1_PHY_AFEC0_PD_DLANE3		BIT(10)
+# define DSI1_PHY_AFEC0_PD_DLANE3		BIT(8)
 # define DSI0_PHY_AFEC0_PD_BG			BIT(9)
 # define DSI1_PHY_AFEC0_PD_DLANE2		BIT(9)
 # define DSI0_PHY_AFEC0_PD_DLANE1		BIT(8)
-# define DSI1_PHY_AFEC0_PD_DLANE1		BIT(8)
+# define DSI1_PHY_AFEC0_PD_DLANE1		BIT(10)
 # define DSI_PHY_AFEC0_PTATADJ_MASK		VC4_MASK(7, 4)
 # define DSI_PHY_AFEC0_PTATADJ_SHIFT		4
 # define DSI_PHY_AFEC0_CTATADJ_MASK		VC4_MASK(3, 0)
@@ -544,6 +544,8 @@ struct vc4_dsi {
 
 #define host_to_dsi(host) container_of(host, struct vc4_dsi, dsi_host)
 
+static uint enabled = false;
+
 static inline void
 dsi_dma_workaround_write(struct vc4_dsi *dsi, u32 offset, u32 val)
 {
@@ -753,12 +755,12 @@ static void vc4_dsi_encoder_disable(struct drm_encoder *encoder)
 	struct device *dev = &dsi->pdev->dev;
 
 	drm_bridge_disable(dsi->bridge);
-	vc4_dsi_ulps(dsi, true);
+	//vc4_dsi_ulps(dsi, true);
 	drm_bridge_post_disable(dsi->bridge);
 
-	clk_disable_unprepare(dsi->pll_phy_clock);
-	clk_disable_unprepare(dsi->escape_clock);
-	clk_disable_unprepare(dsi->pixel_clock);
+	//clk_disable_unprepare(dsi->pll_phy_clock);
+	//clk_disable_unprepare(dsi->escape_clock);
+	//clk_disable_unprepare(dsi->pixel_clock);
 
 	pm_runtime_put(dev);
 }
@@ -791,11 +793,9 @@ static bool vc4_dsi_encoder_mode_fixup(struct drm_encoder *encoder,
 	/* Find what divider gets us a faster clock than the requested
 	 * pixel clock.
 	 */
-	for (divider = 1; divider < 8; divider++) {
-		if (parent_rate / divider < pll_clock) {
-			divider--;
+	for (divider = 1; divider < 7; divider++) {
+		if (parent_rate / (divider + 1) < pll_clock)
 			break;
-		}
 	}
 
 	/* Now that we've picked a PLL divider, calculate back to its
@@ -831,252 +831,256 @@ static void vc4_dsi_encoder_enable(struct drm_encoder *encoder)
 	unsigned long phy_clock;
 	int ret;
 
-	ret = pm_runtime_get_sync(dev);
-	if (ret) {
-		DRM_ERROR("Failed to runtime PM enable on DSI%d\n", dsi->port);
-		return;
-	}
-
-	if (debug_dump_regs) {
-		struct drm_printer p = drm_info_printer(&dsi->pdev->dev);
-		dev_info(&dsi->pdev->dev, "DSI regs before:\n");
-		drm_print_regset32(&p, &dsi->regset);
-	}
-
-	/* Round up the clk_set_rate() request slightly, since
-	 * PLLD_DSI1 is an integer divider and its rate selection will
-	 * never round up.
-	 */
-	phy_clock = (pixel_clock_hz + 1000) * dsi->divider;
-	ret = clk_set_rate(dsi->pll_phy_clock, phy_clock);
-	if (ret) {
-		dev_err(&dsi->pdev->dev,
-			"Failed to set phy clock to %ld: %d\n", phy_clock, ret);
-	}
-
-	/* Reset the DSI and all its fifos. */
-	DSI_PORT_WRITE(CTRL,
-		       DSI_CTRL_SOFT_RESET_CFG |
-		       DSI_PORT_BIT(CTRL_RESET_FIFOS));
+	if (!enabled)
+	{
+		ret = pm_runtime_get_sync(dev);
+		if (ret < 0) {
+			DRM_ERROR("Failed to runtime PM enable on DSI%d\n", dsi->port);
+			return;
+		}
 
-	DSI_PORT_WRITE(CTRL,
-		       DSI_CTRL_HSDT_EOT_DISABLE |
-		       DSI_CTRL_RX_LPDT_EOT_DISABLE);
+		if (debug_dump_regs) {
+			struct drm_printer p = drm_info_printer(&dsi->pdev->dev);
+			dev_info(&dsi->pdev->dev, "DSI regs before:\n");
+			drm_print_regset32(&p, &dsi->regset);
+		}
 
-	/* Clear all stat bits so we see what has happened during enable. */
-	DSI_PORT_WRITE(STAT, DSI_PORT_READ(STAT));
+		/* Round up the clk_set_rate() request slightly, since
+		* PLLD_DSI1 is an integer divider and its rate selection will
+		* never round up.
+		*/
+		phy_clock = (pixel_clock_hz + 1000) * dsi->divider;
+		ret = clk_set_rate(dsi->pll_phy_clock, phy_clock);
+		if (ret) {
+			dev_err(&dsi->pdev->dev,
+				"Failed to set phy clock to %ld: %d\n", phy_clock, ret);
+		}
 
-	/* Set AFE CTR00/CTR1 to release powerdown of analog. */
-	if (dsi->port == 0) {
-		u32 afec0 = (VC4_SET_FIELD(7, DSI_PHY_AFEC0_PTATADJ) |
-			     VC4_SET_FIELD(7, DSI_PHY_AFEC0_CTATADJ));
+		/* Reset the DSI and all its fifos. */
+		DSI_PORT_WRITE(CTRL,
+				DSI_CTRL_SOFT_RESET_CFG |
+				DSI_PORT_BIT(CTRL_RESET_FIFOS));
 
-		if (dsi->lanes < 2)
-			afec0 |= DSI0_PHY_AFEC0_PD_DLANE1;
+		DSI_PORT_WRITE(CTRL,
+				DSI_CTRL_HSDT_EOT_DISABLE |
+				DSI_CTRL_RX_LPDT_EOT_DISABLE);
 
-		if (!(dsi->mode_flags & MIPI_DSI_MODE_VIDEO))
-			afec0 |= DSI0_PHY_AFEC0_RESET;
+		/* Clear all stat bits so we see what has happened during enable. */
+		DSI_PORT_WRITE(STAT, DSI_PORT_READ(STAT));
 
-		DSI_PORT_WRITE(PHY_AFEC0, afec0);
+		/* Set AFE CTR00/CTR1 to release powerdown of analog. */
+		if (dsi->port == 0) {
+			u32 afec0 = (VC4_SET_FIELD(7, DSI_PHY_AFEC0_PTATADJ) |
+					VC4_SET_FIELD(7, DSI_PHY_AFEC0_CTATADJ));
 
-		DSI_PORT_WRITE(PHY_AFEC1,
-			       VC4_SET_FIELD(6,  DSI0_PHY_AFEC1_IDR_DLANE1) |
-			       VC4_SET_FIELD(6,  DSI0_PHY_AFEC1_IDR_DLANE0) |
-			       VC4_SET_FIELD(6,  DSI0_PHY_AFEC1_IDR_CLANE));
-	} else {
-		u32 afec0 = (VC4_SET_FIELD(7, DSI_PHY_AFEC0_PTATADJ) |
-			     VC4_SET_FIELD(7, DSI_PHY_AFEC0_CTATADJ) |
-			     VC4_SET_FIELD(6, DSI1_PHY_AFEC0_IDR_CLANE) |
-			     VC4_SET_FIELD(6, DSI1_PHY_AFEC0_IDR_DLANE0) |
-			     VC4_SET_FIELD(6, DSI1_PHY_AFEC0_IDR_DLANE1) |
-			     VC4_SET_FIELD(6, DSI1_PHY_AFEC0_IDR_DLANE2) |
-			     VC4_SET_FIELD(6, DSI1_PHY_AFEC0_IDR_DLANE3));
+			if (dsi->lanes < 2)
+				afec0 |= DSI0_PHY_AFEC0_PD_DLANE1;
 
-		if (dsi->lanes < 4)
-			afec0 |= DSI1_PHY_AFEC0_PD_DLANE3;
-		if (dsi->lanes < 3)
-			afec0 |= DSI1_PHY_AFEC0_PD_DLANE2;
-		if (dsi->lanes < 2)
-			afec0 |= DSI1_PHY_AFEC0_PD_DLANE1;
+			if (!(dsi->mode_flags & MIPI_DSI_MODE_VIDEO))
+				afec0 |= DSI0_PHY_AFEC0_RESET;
 
-		afec0 |= DSI1_PHY_AFEC0_RESET;
+			DSI_PORT_WRITE(PHY_AFEC0, afec0);
 
-		DSI_PORT_WRITE(PHY_AFEC0, afec0);
+			DSI_PORT_WRITE(PHY_AFEC1,
+					VC4_SET_FIELD(6,  DSI0_PHY_AFEC1_IDR_DLANE1) |
+					VC4_SET_FIELD(6,  DSI0_PHY_AFEC1_IDR_DLANE0) |
+					VC4_SET_FIELD(6,  DSI0_PHY_AFEC1_IDR_CLANE));
+		} else {
+			u32 afec0 = (VC4_SET_FIELD(7, DSI_PHY_AFEC0_PTATADJ) |
+					VC4_SET_FIELD(7, DSI_PHY_AFEC0_CTATADJ) |
+					VC4_SET_FIELD(6, DSI1_PHY_AFEC0_IDR_CLANE) |
+					VC4_SET_FIELD(6, DSI1_PHY_AFEC0_IDR_DLANE0) |
+					VC4_SET_FIELD(6, DSI1_PHY_AFEC0_IDR_DLANE1) |
+					VC4_SET_FIELD(6, DSI1_PHY_AFEC0_IDR_DLANE2) |
+					VC4_SET_FIELD(6, DSI1_PHY_AFEC0_IDR_DLANE3));
 
-		DSI_PORT_WRITE(PHY_AFEC1, 0);
+			if (dsi->lanes < 4)
+				afec0 |= DSI1_PHY_AFEC0_PD_DLANE3;
+			if (dsi->lanes < 3)
+				afec0 |= DSI1_PHY_AFEC0_PD_DLANE2;
+			if (dsi->lanes < 2)
+				afec0 |= DSI1_PHY_AFEC0_PD_DLANE1;
 
-		/* AFEC reset hold time */
-		mdelay(1);
-	}
+			afec0 |= DSI1_PHY_AFEC0_RESET;
 
-	ret = clk_prepare_enable(dsi->escape_clock);
-	if (ret) {
-		DRM_ERROR("Failed to turn on DSI escape clock: %d\n", ret);
-		return;
-	}
+			DSI_PORT_WRITE(PHY_AFEC0, afec0);
 
-	ret = clk_prepare_enable(dsi->pll_phy_clock);
-	if (ret) {
-		DRM_ERROR("Failed to turn on DSI PLL: %d\n", ret);
-		return;
-	}
+			DSI_PORT_WRITE(PHY_AFEC1, 0);
 
-	hs_clock = clk_get_rate(dsi->pll_phy_clock);
+			/* AFEC reset hold time */
+			mdelay(1);
+		}
 
-	/* Yes, we set the DSI0P/DSI1P pixel clock to the byte rate,
-	 * not the pixel clock rate.  DSIxP take from the APHY's byte,
-	 * DDR2, or DDR4 clock (we use byte) and feed into the PV at
-	 * that rate.  Separately, a value derived from PIX_CLK_DIV
-	 * and HS_CLKC is fed into the PV to divide down to the actual
-	 * pixel clock for pushing pixels into DSI.
-	 */
-	dsip_clock = phy_clock / 8;
-	ret = clk_set_rate(dsi->pixel_clock, dsip_clock);
-	if (ret) {
-		dev_err(dev, "Failed to set pixel clock to %ldHz: %d\n",
-			dsip_clock, ret);
-	}
+		ret = clk_prepare_enable(dsi->escape_clock);
+		if (ret) {
+			DRM_ERROR("Failed to turn on DSI escape clock: %d\n", ret);
+			return;
+		}
 
-	ret = clk_prepare_enable(dsi->pixel_clock);
-	if (ret) {
-		DRM_ERROR("Failed to turn on DSI pixel clock: %d\n", ret);
-		return;
-	}
+		ret = clk_prepare_enable(dsi->pll_phy_clock);
+		if (ret) {
+			DRM_ERROR("Failed to turn on DSI PLL: %d\n", ret);
+			return;
+		}
 
-	/* How many ns one DSI unit interval is.  Note that the clock
-	 * is DDR, so there's an extra divide by 2.
-	 */
-	ui_ns = DIV_ROUND_UP(500000000, hs_clock);
-
-	DSI_PORT_WRITE(HS_CLT0,
-		       VC4_SET_FIELD(dsi_hs_timing(ui_ns, 262, 0),
-				     DSI_HS_CLT0_CZERO) |
-		       VC4_SET_FIELD(dsi_hs_timing(ui_ns, 0, 8),
-				     DSI_HS_CLT0_CPRE) |
-		       VC4_SET_FIELD(dsi_hs_timing(ui_ns, 38, 0),
-				     DSI_HS_CLT0_CPREP));
-
-	DSI_PORT_WRITE(HS_CLT1,
-		       VC4_SET_FIELD(dsi_hs_timing(ui_ns, 60, 0),
-				     DSI_HS_CLT1_CTRAIL) |
-		       VC4_SET_FIELD(dsi_hs_timing(ui_ns, 60, 52),
-				     DSI_HS_CLT1_CPOST));
-
-	DSI_PORT_WRITE(HS_CLT2,
-		       VC4_SET_FIELD(dsi_hs_timing(ui_ns, 1000000, 0),
-				     DSI_HS_CLT2_WUP));
-
-	DSI_PORT_WRITE(HS_DLT3,
-		       VC4_SET_FIELD(dsi_hs_timing(ui_ns, 100, 0),
-				     DSI_HS_DLT3_EXIT) |
-		       VC4_SET_FIELD(dsi_hs_timing(ui_ns, 105, 6),
-				     DSI_HS_DLT3_ZERO) |
-		       VC4_SET_FIELD(dsi_hs_timing(ui_ns, 40, 4),
-				     DSI_HS_DLT3_PRE));
-
-	DSI_PORT_WRITE(HS_DLT4,
-		       VC4_SET_FIELD(dsi_hs_timing(ui_ns, lpx * ESC_TIME_NS, 0),
-				     DSI_HS_DLT4_LPX) |
-		       VC4_SET_FIELD(max(dsi_hs_timing(ui_ns, 0, 8),
-					 dsi_hs_timing(ui_ns, 60, 4)),
-				     DSI_HS_DLT4_TRAIL) |
-		       VC4_SET_FIELD(0, DSI_HS_DLT4_ANLAT));
-
-	/* T_INIT is how long STOP is driven after power-up to
-	 * indicate to the slave (also coming out of power-up) that
-	 * master init is complete, and should be greater than the
-	 * maximum of two value: T_INIT,MASTER and T_INIT,SLAVE.  The
-	 * D-PHY spec gives a minimum 100us for T_INIT,MASTER and
-	 * T_INIT,SLAVE, while allowing protocols on top of it to give
-	 * greater minimums.  The vc4 firmware uses an extremely
-	 * conservative 5ms, and we maintain that here.
-	 */
-	DSI_PORT_WRITE(HS_DLT5, VC4_SET_FIELD(dsi_hs_timing(ui_ns,
-							    5 * 1000 * 1000, 0),
-					      DSI_HS_DLT5_INIT));
-
-	DSI_PORT_WRITE(HS_DLT6,
-		       VC4_SET_FIELD(lpx * 5, DSI_HS_DLT6_TA_GET) |
-		       VC4_SET_FIELD(lpx, DSI_HS_DLT6_TA_SURE) |
-		       VC4_SET_FIELD(lpx * 4, DSI_HS_DLT6_TA_GO) |
-		       VC4_SET_FIELD(lpx, DSI_HS_DLT6_LP_LPX));
-
-	DSI_PORT_WRITE(HS_DLT7,
-		       VC4_SET_FIELD(dsi_esc_timing(1000000),
-				     DSI_HS_DLT7_LP_WUP));
-
-	DSI_PORT_WRITE(PHYC,
-		       DSI_PHYC_DLANE0_ENABLE |
-		       (dsi->lanes >= 2 ? DSI_PHYC_DLANE1_ENABLE : 0) |
-		       (dsi->lanes >= 3 ? DSI_PHYC_DLANE2_ENABLE : 0) |
-		       (dsi->lanes >= 4 ? DSI_PHYC_DLANE3_ENABLE : 0) |
-		       DSI_PORT_BIT(PHYC_CLANE_ENABLE) |
-		       ((dsi->mode_flags & MIPI_DSI_CLOCK_NON_CONTINUOUS) ?
-			0 : DSI_PORT_BIT(PHYC_HS_CLK_CONTINUOUS)) |
-		       (dsi->port == 0 ?
-			VC4_SET_FIELD(lpx - 1, DSI0_PHYC_ESC_CLK_LPDT) :
-			VC4_SET_FIELD(lpx - 1, DSI1_PHYC_ESC_CLK_LPDT)));
+		hs_clock = clk_get_rate(dsi->pll_phy_clock);
+
+		/* Yes, we set the DSI0P/DSI1P pixel clock to the byte rate,
+		* not the pixel clock rate.  DSIxP take from the APHY's byte,
+		* DDR2, or DDR4 clock (we use byte) and feed into the PV at
+		* that rate.  Separately, a value derived from PIX_CLK_DIV
+		* and HS_CLKC is fed into the PV to divide down to the actual
+		* pixel clock for pushing pixels into DSI.
+		*/
+		dsip_clock = phy_clock / 8;
+		ret = clk_set_rate(dsi->pixel_clock, dsip_clock);
+		if (ret) {
+			dev_err(dev, "Failed to set pixel clock to %ldHz: %d\n",
+				dsip_clock, ret);
+		}
 
-	DSI_PORT_WRITE(CTRL,
-		       DSI_PORT_READ(CTRL) |
-		       DSI_CTRL_CAL_BYTE);
-
-	/* HS timeout in HS clock cycles: disabled. */
-	DSI_PORT_WRITE(HSTX_TO_CNT, 0);
-	/* LP receive timeout in HS clocks. */
-	DSI_PORT_WRITE(LPRX_TO_CNT, 0xffffff);
-	/* Bus turnaround timeout */
-	DSI_PORT_WRITE(TA_TO_CNT, 100000);
-	/* Display reset sequence timeout */
-	DSI_PORT_WRITE(PR_TO_CNT, 100000);
-
-	/* Set up DISP1 for transferring long command payloads through
-	 * the pixfifo.
-	 */
-	DSI_PORT_WRITE(DISP1_CTRL,
-		       VC4_SET_FIELD(DSI_DISP1_PFORMAT_32BIT_LE,
-				     DSI_DISP1_PFORMAT) |
-		       DSI_DISP1_ENABLE);
+		ret = clk_prepare_enable(dsi->pixel_clock);
+		if (ret) {
+			DRM_ERROR("Failed to turn on DSI pixel clock: %d\n", ret);
+			return;
+		}
 
-	/* Ungate the block. */
-	if (dsi->port == 0)
-		DSI_PORT_WRITE(CTRL, DSI_PORT_READ(CTRL) | DSI0_CTRL_CTRL0);
-	else
-		DSI_PORT_WRITE(CTRL, DSI_PORT_READ(CTRL) | DSI1_CTRL_EN);
+		/* How many ns one DSI unit interval is.  Note that the clock
+		* is DDR, so there's an extra divide by 2.
+		*/
+		ui_ns = DIV_ROUND_UP(500000000, hs_clock);
+
+		DSI_PORT_WRITE(HS_CLT0,
+				VC4_SET_FIELD(dsi_hs_timing(ui_ns, 262, 0),
+						DSI_HS_CLT0_CZERO) |
+				VC4_SET_FIELD(dsi_hs_timing(ui_ns, 0, 8),
+						DSI_HS_CLT0_CPRE) |
+				VC4_SET_FIELD(dsi_hs_timing(ui_ns, 38, 0),
+						DSI_HS_CLT0_CPREP));
+
+		DSI_PORT_WRITE(HS_CLT1,
+				VC4_SET_FIELD(dsi_hs_timing(ui_ns, 60, 0),
+						DSI_HS_CLT1_CTRAIL) |
+				VC4_SET_FIELD(dsi_hs_timing(ui_ns, 60, 52),
+						DSI_HS_CLT1_CPOST));
+
+		DSI_PORT_WRITE(HS_CLT2,
+				VC4_SET_FIELD(dsi_hs_timing(ui_ns, 1000000, 0),
+						DSI_HS_CLT2_WUP));
+
+		DSI_PORT_WRITE(HS_DLT3,
+				VC4_SET_FIELD(dsi_hs_timing(ui_ns, 100, 0),
+						DSI_HS_DLT3_EXIT) |
+				VC4_SET_FIELD(dsi_hs_timing(ui_ns, 105, 6),
+						DSI_HS_DLT3_ZERO) |
+				VC4_SET_FIELD(dsi_hs_timing(ui_ns, 40, 4),
+						DSI_HS_DLT3_PRE));
+
+		DSI_PORT_WRITE(HS_DLT4,
+				VC4_SET_FIELD(dsi_hs_timing(ui_ns, lpx * ESC_TIME_NS, 0),
+						DSI_HS_DLT4_LPX) |
+				VC4_SET_FIELD(max(dsi_hs_timing(ui_ns, 0, 8),
+						dsi_hs_timing(ui_ns, 60, 4)),
+						DSI_HS_DLT4_TRAIL) |
+				VC4_SET_FIELD(0, DSI_HS_DLT4_ANLAT));
+
+		/* T_INIT is how long STOP is driven after power-up to
+		* indicate to the slave (also coming out of power-up) that
+		* master init is complete, and should be greater than the
+		* maximum of two value: T_INIT,MASTER and T_INIT,SLAVE.  The
+		* D-PHY spec gives a minimum 100us for T_INIT,MASTER and
+		* T_INIT,SLAVE, while allowing protocols on top of it to give
+		* greater minimums.  The vc4 firmware uses an extremely
+		* conservative 5ms, and we maintain that here.
+		*/
+		DSI_PORT_WRITE(HS_DLT5, VC4_SET_FIELD(dsi_hs_timing(ui_ns,
+									5 * 1000 * 1000, 0),
+							DSI_HS_DLT5_INIT));
+
+		DSI_PORT_WRITE(HS_DLT6,
+				VC4_SET_FIELD(lpx * 5, DSI_HS_DLT6_TA_GET) |
+				VC4_SET_FIELD(lpx, DSI_HS_DLT6_TA_SURE) |
+				VC4_SET_FIELD(lpx * 4, DSI_HS_DLT6_TA_GO) |
+				VC4_SET_FIELD(lpx, DSI_HS_DLT6_LP_LPX));
+
+		DSI_PORT_WRITE(HS_DLT7,
+				VC4_SET_FIELD(dsi_esc_timing(1000000),
+						DSI_HS_DLT7_LP_WUP));
+
+		DSI_PORT_WRITE(PHYC,
+				DSI_PHYC_DLANE0_ENABLE |
+				(dsi->lanes >= 2 ? DSI_PHYC_DLANE1_ENABLE : 0) |
+				(dsi->lanes >= 3 ? DSI_PHYC_DLANE2_ENABLE : 0) |
+				(dsi->lanes >= 4 ? DSI_PHYC_DLANE3_ENABLE : 0) |
+				DSI_PORT_BIT(PHYC_CLANE_ENABLE) |
+				((dsi->mode_flags & MIPI_DSI_CLOCK_NON_CONTINUOUS) ?
+				0 : DSI_PORT_BIT(PHYC_HS_CLK_CONTINUOUS)) |
+				(dsi->port == 0 ?
+				VC4_SET_FIELD(lpx - 1, DSI0_PHYC_ESC_CLK_LPDT) :
+				VC4_SET_FIELD(lpx - 1, DSI1_PHYC_ESC_CLK_LPDT)));
+
+		DSI_PORT_WRITE(CTRL,
+				DSI_PORT_READ(CTRL) |
+				DSI_CTRL_CAL_BYTE);
+
+		/* HS timeout in HS clock cycles: disabled. */
+		DSI_PORT_WRITE(HSTX_TO_CNT, 0);
+		/* LP receive timeout in HS clocks. */
+		DSI_PORT_WRITE(LPRX_TO_CNT, 0xffffff);
+		/* Bus turnaround timeout */
+		DSI_PORT_WRITE(TA_TO_CNT, 100000);
+		/* Display reset sequence timeout */
+		DSI_PORT_WRITE(PR_TO_CNT, 100000);
+
+		/* Set up DISP1 for transferring long command payloads through
+		* the pixfifo.
+		*/
+		DSI_PORT_WRITE(DISP1_CTRL,
+				VC4_SET_FIELD(DSI_DISP1_PFORMAT_32BIT_LE,
+						DSI_DISP1_PFORMAT) |
+				DSI_DISP1_ENABLE);
+
+		/* Ungate the block. */
+		if (dsi->port == 0)
+			DSI_PORT_WRITE(CTRL, DSI_PORT_READ(CTRL) | DSI0_CTRL_CTRL0);
+		else
+			DSI_PORT_WRITE(CTRL, DSI_PORT_READ(CTRL) | DSI1_CTRL_EN);
 
-	/* Bring AFE out of reset. */
-	if (dsi->port == 0) {
-	} else {
-		DSI_PORT_WRITE(PHY_AFEC0,
-			       DSI_PORT_READ(PHY_AFEC0) &
-			       ~DSI1_PHY_AFEC0_RESET);
-	}
+		/* Bring AFE out of reset. */
+		if (dsi->port == 0) {
+		} else {
+			DSI_PORT_WRITE(PHY_AFEC0,
+					DSI_PORT_READ(PHY_AFEC0) &
+					~DSI1_PHY_AFEC0_RESET);
+		}
 
-	vc4_dsi_ulps(dsi, false);
+		vc4_dsi_ulps(dsi, false);
 
-	drm_bridge_pre_enable(dsi->bridge);
+		drm_bridge_pre_enable(dsi->bridge);
 
-	if (dsi->mode_flags & MIPI_DSI_MODE_VIDEO) {
-		DSI_PORT_WRITE(DISP0_CTRL,
-			       VC4_SET_FIELD(dsi->divider,
-					     DSI_DISP0_PIX_CLK_DIV) |
-			       VC4_SET_FIELD(dsi->format, DSI_DISP0_PFORMAT) |
-			       VC4_SET_FIELD(DSI_DISP0_LP_STOP_PERFRAME,
-					     DSI_DISP0_LP_STOP_CTRL) |
-			       DSI_DISP0_ST_END |
-			       DSI_DISP0_ENABLE);
-	} else {
-		DSI_PORT_WRITE(DISP0_CTRL,
-			       DSI_DISP0_COMMAND_MODE |
-			       DSI_DISP0_ENABLE);
-	}
+		if (dsi->mode_flags & MIPI_DSI_MODE_VIDEO) {
+			DSI_PORT_WRITE(DISP0_CTRL,
+					VC4_SET_FIELD(dsi->divider,
+							DSI_DISP0_PIX_CLK_DIV) |
+					VC4_SET_FIELD(dsi->format, DSI_DISP0_PFORMAT) |
+					VC4_SET_FIELD(DSI_DISP0_LP_STOP_PERFRAME,
+							DSI_DISP0_LP_STOP_CTRL) |
+					DSI_DISP0_ST_END |
+					DSI_DISP0_ENABLE);
+		} else {
+			DSI_PORT_WRITE(DISP0_CTRL,
+					DSI_DISP0_COMMAND_MODE |
+					DSI_DISP0_ENABLE);
+		}
 
-	drm_bridge_enable(dsi->bridge);
+		drm_bridge_enable(dsi->bridge);
 
-	if (debug_dump_regs) {
-		struct drm_printer p = drm_info_printer(&dsi->pdev->dev);
-		dev_info(&dsi->pdev->dev, "DSI regs after:\n");
-		drm_print_regset32(&p, &dsi->regset);
+		if (debug_dump_regs) {
+			struct drm_printer p = drm_info_printer(&dsi->pdev->dev);
+			dev_info(&dsi->pdev->dev, "DSI regs after:\n");
+			drm_print_regset32(&p, &dsi->regset);
+		}
+		enabled = true;
 	}
 }
 
@@ -1446,7 +1450,7 @@ static int vc4_dsi_bind(struct device *dev, struct device *master, void *data)
 	struct vc4_dsi_encoder *vc4_dsi_encoder;
 	struct drm_panel *panel;
 	const struct of_device_id *match;
-	dma_cap_mask_t dma_mask;
+	//dma_cap_mask_t dma_mask;
 	int ret;
 
 	match = of_match_device(vc4_dsi_dt_match, dev);
@@ -1488,25 +1492,25 @@ static int vc4_dsi_bind(struct device *dev, struct device *master, void *data)
 	 * Where possible managed resource providers are used, but the DMA channel
 	 * must - if acquired - be explicitly released prior to taking an error exit path.
 	 */
-	if (dsi->port == 1) {
-		dsi->reg_dma_mem = dmam_alloc_coherent(dev, 4,
-						      &dsi->reg_dma_paddr,
-						      GFP_KERNEL);
-		if (!dsi->reg_dma_mem) {
-			DRM_ERROR("Failed to get DMA memory\n");
-			return -ENOMEM;
-		}
-
-		dma_cap_zero(dma_mask);
-		dma_cap_set(DMA_MEMCPY, dma_mask);
-		dsi->reg_dma_chan = dma_request_chan_by_mask(&dma_mask);
-		if (IS_ERR(dsi->reg_dma_chan)) {
-			ret = PTR_ERR(dsi->reg_dma_chan);
-			if (ret != -EPROBE_DEFER)
-				DRM_ERROR("Failed to get DMA channel: %d\n",
-					  ret);
-			return ret;
-		}
+	//if (dsi->port == 1) {
+	//	dsi->reg_dma_mem = dmam_alloc_coherent(dev, 4,
+	//					      &dsi->reg_dma_paddr,
+	//					      GFP_KERNEL);
+	//	if (!dsi->reg_dma_mem) {
+	//		DRM_ERROR("Failed to get DMA memory\n");
+	//		return -ENOMEM;
+	//	}
+
+	//	dma_cap_zero(dma_mask);
+	//	dma_cap_set(DMA_MEMCPY, dma_mask);
+	//	dsi->reg_dma_chan = dma_request_chan_by_mask(&dma_mask);
+	//	if (IS_ERR(dsi->reg_dma_chan)) {
+	//		ret = PTR_ERR(dsi->reg_dma_chan);
+	//		if (ret != -EPROBE_DEFER)
+	//			DRM_ERROR("Failed to get DMA channel: %d\n",
+	//				  ret);
+	//		return ret;
+	//	}
 
 		/* From here on, any error exits must release the dma channel */
 
@@ -1514,9 +1518,9 @@ static int vc4_dsi_bind(struct device *dev, struct device *master, void *data)
 		 * struct resource for the regs gives us the bus address
 		 * instead.
 		 */
-		dsi->reg_paddr = be32_to_cpup(of_get_address(dev->of_node,
-							     0, NULL, NULL));
-	}
+	//	dsi->reg_paddr = be32_to_cpup(of_get_address(dev->of_node,
+	//						     0, NULL, NULL));
+	//}
 
 	init_completion(&dsi->xfer_completion);
 	/* At startup enable error-reporting interrupts and nothing else. */
@@ -1627,7 +1631,10 @@ static int vc4_dsi_bind(struct device *dev, struct device *master, void *data)
 	return 0;
 
 rel_dma_exit:
-	dma_release_channel(dsi->reg_dma_chan);
+    if (dsi->reg_dma_chan) {
+		dma_release_channel(dsi->reg_dma_chan);
+		dsi->reg_dma_chan = NULL;
+	}
 
 	return ret;
 }
@@ -1644,7 +1651,10 @@ static void vc4_dsi_unbind(struct device *dev, struct device *master,
 
 	vc4_dsi_encoder_destroy(dsi->encoder);
 
-	dma_release_channel(dsi->reg_dma_chan);
+	if (dsi->reg_dma_chan) {
+		dma_release_channel(dsi->reg_dma_chan);
+		dsi->reg_dma_chan = NULL;
+	}
 
 	if (dsi->port == 1)
 		vc4->dsi1 = NULL;
diff --git a/drivers/i2c/busses/i2c-bcm2835.c b/drivers/i2c/busses/i2c-bcm2835.c
index 9f4f4964a507..f36b9806bf27 100644
--- a/drivers/i2c/busses/i2c-bcm2835.c
+++ b/drivers/i2c/busses/i2c-bcm2835.c
@@ -202,6 +202,8 @@ static int clk_bcm2835_i2c_set_rate(struct clk_hw *hw, unsigned long rate,
 	 * can't be greater than CDIV/2.
 	 */
 	fedl = max(divider / 16, 1u);
+	if (fedl == 0x1f)
+		fedl = 0x2f;
 
 	/*
 	 * Number of core clocks to wait after rising edge before
@@ -212,6 +214,7 @@ static int clk_bcm2835_i2c_set_rate(struct clk_hw *hw, unsigned long rate,
 	bcm2835_i2c_writel(div->i2c_dev, BCM2835_I2C_DEL,
 			   (fedl << BCM2835_I2C_FEDL_SHIFT) |
 			   (redl << BCM2835_I2C_REDL_SHIFT));
+	printk(KERN_INFO "clk_bcm2835_i2c_set_rate: DEL reg %X", bcm2835_i2c_readl(div->i2c_dev, BCM2835_I2C_DEL));
 
 	/*
 	 * Set the clock stretch timeout to the SMBUs-recommended 35ms.
@@ -222,6 +225,7 @@ static int clk_bcm2835_i2c_set_rate(struct clk_hw *hw, unsigned long rate,
 	    clk_tout = 35*rate/1000;
 
 	bcm2835_i2c_writel(div->i2c_dev, BCM2835_I2C_CLKT, clk_tout);
+	//bcm2835_i2c_writel(div->i2c_dev, BCM2835_I2C_CLKT, 0);
 
 	return 0;
 }
@@ -299,6 +303,7 @@ static void bcm2835_drain_rxfifo(struct bcm2835_i2c_dev *i2c_dev)
 	u32 val;
 
 	while (i2c_dev->msg_buf_remaining) {
+		//printk(KERN_INFO "bcm2835_drain_rxfifo remaining: %X",i2c_dev->msg_buf_remaining);
 		val = bcm2835_i2c_readl(i2c_dev, BCM2835_I2C_S);
 		if (!(val & BCM2835_I2C_S_RXD))
 			break;
@@ -381,16 +386,25 @@ static irqreturn_t bcm2835_i2c_isr(int this_irq, void *data)
 		goto complete;
 	}
 
-	if (val & BCM2835_I2C_S_DONE) {
+	if ((val & (BCM2835_I2C_S_DONE | BCM2835_I2C_S_TA)) == (BCM2835_I2C_S_DONE | BCM2835_I2C_S_TA)) {
+		printk(KERN_INFO "bcm2835_i2c_isr ERROR: %X %X",val,i2c_dev->msg_buf_remaining);
+	}
+
+	if ((val & (BCM2835_I2C_S_DONE | BCM2835_I2C_S_TA)) == BCM2835_I2C_S_DONE) {
 		if (!i2c_dev->curr_msg) {
-			dev_err(i2c_dev->dev, "Got unexpected interrupt (from firmware?)\n");
+			//dev_err(i2c_dev->dev, "Got unexpected interrupt (from firmware?)\n");
+			printk(KERN_INFO "Got unexpected interrupt (from firmware?): %X",val);
 		} else if (i2c_dev->curr_msg->flags & I2C_M_RD) {
+			//printk(KERN_INFO "About to bcm2835_drain_rxfifo...: %X %X",val,i2c_dev->msg_buf_remaining);
 			bcm2835_drain_rxfifo(i2c_dev);
 			val = bcm2835_i2c_readl(i2c_dev, BCM2835_I2C_S);
+			//printk(KERN_INFO "bcm2835_drain_rxfifo DONE: %X %X",val,i2c_dev->msg_buf_remaining);
 		}
 
-		if ((val & BCM2835_I2C_S_RXD) || i2c_dev->msg_buf_remaining)
-			i2c_dev->msg_err = BCM2835_I2C_S_LEN;
+		if ((val & BCM2835_I2C_S_RXD) || i2c_dev->msg_buf_remaining) {
+			printk(KERN_INFO "bcm2835_i2c_isr ERROR: %X %X",val,i2c_dev->msg_buf_remaining);
+			i2c_dev->msg_err = val | BCM2835_I2C_S_LEN;
+		}
 		else
 			i2c_dev->msg_err = 0;
 		goto complete;
@@ -486,6 +500,7 @@ static int bcm2835_i2c_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[],
 	if (i2c_dev->msg_err & BCM2835_I2C_S_ERR)
 		return -EREMOTEIO;
 
+	printk(KERN_INFO "i2c transfer failed: %X", i2c_dev->msg_err);
 	return -EIO;
 }
 
@@ -588,6 +603,7 @@ static int bcm2835_i2c_probe(struct platform_device *pdev)
 	adap->dev.of_node = pdev->dev.of_node;
 	adap->quirks = of_device_get_match_data(&pdev->dev);
 
+	bcm2835_i2c_writel(i2c_dev, BCM2835_I2C_CLKT, 0);
 	bcm2835_i2c_writel(i2c_dev, BCM2835_I2C_C, 0);
 
 	ret = i2c_add_adapter(adap);
diff --git a/drivers/i2c/i2c-dev.c b/drivers/i2c/i2c-dev.c
index 94beacc41302..e5e1885b0b89 100644
--- a/drivers/i2c/i2c-dev.c
+++ b/drivers/i2c/i2c-dev.c
@@ -138,8 +138,8 @@ static ssize_t i2cdev_read(struct file *file, char __user *buf, size_t count,
 
 	struct i2c_client *client = file->private_data;
 
-	if (count > 8192)
-		count = 8192;
+	//if (count > 8192)
+	//	count = 8192;
 
 	tmp = kmalloc(count, GFP_KERNEL);
 	if (tmp == NULL)
@@ -162,8 +162,8 @@ static ssize_t i2cdev_write(struct file *file, const char __user *buf,
 	char *tmp;
 	struct i2c_client *client = file->private_data;
 
-	if (count > 8192)
-		count = 8192;
+	//if (count > 8192)
+	//	count = 8192;
 
 	tmp = memdup_user(buf, count);
 	if (IS_ERR(tmp))
@@ -247,10 +247,10 @@ static noinline int i2cdev_ioctl_rdwr(struct i2c_client *client,
 	res = 0;
 	for (i = 0; i < nmsgs; i++) {
 		/* Limit the size of the message to a sane amount */
-		if (msgs[i].len > 8192) {
-			res = -EINVAL;
-			break;
-		}
+		//if (msgs[i].len > 8192) {
+		//	res = -EINVAL;
+		//	break;
+		//}
 
 		data_ptrs[i] = (u8 __user *)msgs[i].buf;
 		msgs[i].buf = memdup_user(data_ptrs[i], msgs[i].len);
diff --git a/drivers/usb/gadget/function/f_midi.c b/drivers/usb/gadget/function/f_midi.c
index b2b5b0689667..c472fc7c32e5 100644
--- a/drivers/usb/gadget/function/f_midi.c
+++ b/drivers/usb/gadget/function/f_midi.c
@@ -210,7 +210,7 @@ static struct usb_ms_endpoint_descriptor_16 ms_in_desc = {
 #define STRING_FUNC_IDX			0
 
 static struct usb_string midi_string_defs[] = {
-	[STRING_FUNC_IDX].s = "MIDI function",
+	[STRING_FUNC_IDX].s = "DELIA USB MIDI",
 	{  } /* end of list */
 };
 
diff --git a/drivers/usb/gadget/legacy/gmidi.c b/drivers/usb/gadget/legacy/gmidi.c
index 9eea2d18f2bf..0fa9a162db77 100644
--- a/drivers/usb/gadget/legacy/gmidi.c
+++ b/drivers/usb/gadget/legacy/gmidi.c
@@ -86,7 +86,7 @@ static struct usb_device_descriptor device_desc = {
 };
 
 static struct usb_string strings_dev[] = {
-	[USB_GADGET_MANUFACTURER_IDX].s	= "Grey Innovation",
+	[USB_GADGET_MANUFACTURER_IDX].s	= "Melbourne Instruments",
 	[USB_GADGET_PRODUCT_IDX].s	= "MIDI Gadget",
 	[USB_GADGET_SERIAL_IDX].s	= "",
 	[STRING_DESCRIPTION_IDX].s	= "MIDI",
